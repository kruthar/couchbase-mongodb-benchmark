# -*- mode: ruby -*-
# # vi: set ft=ruby :

num_cfg_nodes = 3
num_rep_tiers = 2
num_rep_nodes_per_tier = 3

machines = gen_machines(num_cfg_nodes, num_rep_tiers, num_rep_nodes_per_tier)

Vagrant.configure(2) do |config|
  config.ssh.insert_key = false

  if Vagrant.has_plugin?("vagrant-hostmanager")
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline = true
  end

  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope = :machine
  end

  machines.each do |machine|
    config.vm.define machine[:name] do |vmconfig|
      vmconfig.vm.box = "chef/centos-6.6"
      vmconfig.vm.provider "virtualbox" do |v|
        v.memory = 1024
        v.cpus = 4
      end

      vmconfig.vm.hostname = machine[:name]
      vmconfig.vm.network :private_network, ip: machine[:ip]

      vmconfig.vm.provision "ansible" do |ansible|
        ansible.groups = group_up(machines)
        ansible.playbook = "mongodb/mongodb.yml"
      end
      
#      vmconfig.vm.provision "ansible" do |ansible|
#        ansible.playbook = "ganglia-setup.yml"
#      end
#
#      vmconfig.vm.provision "ansible" do |ansible|
#        ansible.groups = {
#	  "ganglia_master" => ["cb1.benchmark"],
#	  "ganglia_monitor" => ["cb2.benchmark", "cb3.benchmark"],
#	  "all_groups:children" => ["ganglia_master", "ganglia_monitor"]
#	}
#	ansible.limit = 'all'	  
#	ansible.playbook = "ganglia.yml"
#      end
    end
  end
end

def gen_machines(num_cfg_nodes, num_rep_tiers, num_rep_nodes_per_tier)
    config_short_name_fmt = "config%d"
    rep_short_name_fmt = "rep%d%d"
    domain_name = "benchmark"
    ip_start = 40
    ip_fmt = "192.168.56.%d"

    machines = Array.new
    ip_counter = 1
    for n in 1..num_cfg_nodes
        hostname = (config_short_name_fmt + "." + domain_name) % n
        ip = ip_fmt % (ip_start + ip_counter)
        machines.push({:name => hostname, :ip => ip,
            :type => "config", :groups => ["mongodb_config"]})
        ip_counter += 1
    end

    for tier in 1..num_rep_tiers
      for i in 1..num_rep_nodes_per_tier
        hostname = (rep_short_name_fmt + "." + domain_name) % [tier, i]
        ip = ip_fmt % (ip_start + ip_counter)
        machines.push({:name => hostname, :ip => ip,
                    :type => "shard", :groups => ["mongodb_rs%d" % tier]})
        ip_counter += 1
      end
    end

    return machines
end

def group_up (machines)
  groups = Hash.new
  machines.each do |machine|
    name = machine[:name]
    machine[:groups].each do |group|
      if !groups.has_key?(group)
        groups[group] = Array.new
      end
      group_list = groups[group]
      if !group_list.include?(name)
        group_list.push(name)
      end
    end
  end
  all_groups = Array.new
  groups.each do |k, v|
     all_groups.push(k)
  end
  groups["all_groups:children"] = all_groups

  return groups
end
